%==========================================================================
%                  Phase 2: 2-Back Retrieval Task
%==========================================================================
% Author: Zihan Bai, zihan.bai@nyu.edu, Michelmann Lab at NYU
%==========================================================================

function [results_table] = D_run_memory(p, el, test_schedule_block)
    %% ========================================================================
    %  SECTION 1: SET UP
    %  ========================================================================
    
    is_eyetracking = p.eyetracking == 1;
    
    results_table = test_schedule_block;
    num_trials_in_block = height(results_table);
    results_table.response_key = strings(num_trials_in_block, 1);
    results_table.response_key(:) = "NA";
    results_table.correct = nan(num_trials_in_block, 1);
    results_table.rt = nan(num_trials_in_block, 1);

    KbName('UnifyKeyNames');
    escape_key = KbName(p.keys.quit);
    same_key = KbName(p.keys.same);
    diff_key = KbName(p.keys.diff);
    go_key = KbName('g');

    current_block = results_table.block(1);
    total_blocks = p.nBlocks;
    
    %% ========================================================================
    %  SECTION 2: BLOCK & TRIAL EXECUTION
    %  ========================================================================
    %------------------------------------------------------------------
    % 2A: Start of Block Screen
    %------------------------------------------------------------------
    DrawFormattedText(p.window, ['Upcoming Task: 2-BACK\n\n', ...
        sprintf('Block %d of %d.\n\n,', current_block, total_blocks) ...
        'Upcoming Task: 2-BACK\n\n'], 'center', 'center', p.colors.black),
    'When you are ready, press g to begin';
    
    while true
        [keyIsDown, ~, keyCode] = KbCheck;
        if keyIsDown
            if keyCode(go_key), break;
            elseif keyCode(escape_key), error('USER_ABORT'); end
        end
    end

    xCoords = [-p.fix_cross_size, p.fix_cross_size, 0, 0];
    yCoords = [0, 0, -p.fix_cross_size, p.fix_cross_size];
    allCoords = [xCoords; yCoords];
    Screen('DrawLines', p.window, allCoords, p.fix_cross_width, p.colors.black, [p.xCenter p.yCenter]);
    Screen('Flip', p.window);
    WaitSecs(2);

    %------------------------------------------------------------------
    % 2B: Trial loop for the current block
    %------------------------------------------------------------------
    for i = 1:height(results_table)
        
        trial_info = results_table(i,:); % Get current trial info

        % <<< MOD: EYELINK - Mark trial start & perform drift check
        if is_eyetracking
            Eyelink('Message', 'TRIALID %d', i);
            Eyelink('command', 'record_status_message "Block %d, Trial %d"', current_block, i);
            EyelinkDoDriftCorrection(el);
        end
        
        % <<< MOD: EYELINK - Start recording eye movements
        if is_eyetracking
            Eyelink('StartRecording');
            WaitSecs(0.1); % Allow a brief moment to ensure recording has started
        end

        % ---------fixation------------
        Screen('DrawLines', p.window, allCoords, p.fix_cross_width, p.colors.black, [p.xCenter p.yCenter]);
        fix_onset_time = Screen('Flip', p.window);
        if is_eyetracking, Eyelink('Message', 'FIXATION_ONSET'); end

        % ---------stimulus------------
        img_path = fullfile(p.stim_dir, trial_info.stimulus_id);
        if ~exist(img_path, 'file'), error('cannot find image file: %s', img_path); end
        img_data = imread(img_path);
        img_texture = Screen('MakeTexture', p.window, img_data);
        Screen('DrawTexture', p.window, img_texture, [], [], 0);

        % --- present image and collect response ---
        stim_onset_time = Screen('Flip', p.window, fix_onset_time + trial_info.fix_duration - 0.5 * p.ifi);
        
        % <<< MOD: EYELINK - Send messages exactly at stimulus onset
        if is_eyetracking
            Eyelink('Message', 'SYNCTIME'); % Critical for aligning eye data with stimulus
            Eyelink('Message', 'STIM_ONSET %s', trial_info.stimulus_id{1});
            Eyelink('Message', '!V IMGLOAD CENTER %s %d %d', img_path, p.xCenter, p.yCenter);
        end

        key_pressed = "NA";
        response_time = NaN;
        responded = false;
        while GetSecs < stim_onset_time + p.timing.image_dur
            [keyIsDown, secs, keyCode] = KbCheck;
            if keyIsDown && ~responded
                responded = true;
                response_time = secs - stim_onset_time;
                if keyCode(escape_key), error('USER_ABORT:ExperimentAborted', 'Experiment aborted by user.');
                elseif keyCode(same_key), key_pressed = string(p.keys.same);
                elseif keyCode(diff_key), key_pressed = string(p.keys.diff);
                else, key_pressed = "invalid"; end
                if is_eyetracking, Eyelink('Message', 'RESPONSE KEY %s RT %.0f', key_pressed, response_time * 1000); end
            end
        end
        Screen('Close', img_texture);

        % <<< MOD: EYELINK - Stop recording and log trial variables
        if is_eyetracking
            Screen('Flip', p.window); % Show a blank screen after stimulus
            Eyelink('Message', 'BLANK_SCREEN');
            WaitSecs(0.1); % Record a bit more data
            Eyelink('StopRecording');
            
            % Send variables to Data Viewer for analysis
            Eyelink('Message', '!V TRIAL_VAR stimulus %s', trial_info.stimulus_id{1});
            Eyelink('Message', '!V TRIAL_VAR condition %s', trial_info.condition{1});
            Eyelink('Message', '!V TRIAL_VAR response %s', key_pressed);
            
            % Mark the end of the trial for Data Viewer
            Eyelink('Message', 'TRIAL_RESULT 0');
        end

        %------------------------------------------------------------------
        % 2C: Record trial data
        %------------------------------------------------------------------
        results_table.response_key(i) = key_pressed;
        results_table.rt(i) = response_time;
        correct_resp = string(trial_info.correct_response);
        if (key_pressed == "NA" && correct_resp == "none") || (key_pressed == correct_resp)
            results_table.correct(i) = 1;
        else
            results_table.correct(i) = 0;
        end

    end % end of trial loop
    %% ========================================================================
    %  SECTION 3: SAVE BLOCK DATA
    %  ========================================================================
    try
        block_filename = sprintf('sub%03d_mem_b%d.mat', p.subj_id, current_block);
        block_filepath = fullfile(p.results_dir, block_filename);
        save(block_filepath, 'results_table');
        fprintf('Retrieval block %d data saved.\n', current_block);
    catch ME
        warning('SAVE_FAILED: Could not save retrieval data for block %d. Reason: %s', current_block, ME.message);
    end
end