%==========================================================================
%                  Generate stimulus set
%==========================================================================
% author: Zihan Bai

clear; 
clc;
rng('shuffle');

%% set up
%--------------------------------------------------------------------------
n_experimental_pairs = 120;
n_foils = 640;

base_dir = '..';
in_dir = fullfile(base_dir, 'stimulus/stim_norm/');
out_dir = fullfile(base_dir,'stimulus/stim_selected');

mst_set_folders = {'Set 1', 'Set 2', 'Set 3', 'Set 4', 'Set 5', 'Set 6'};
lure_bin_files = {'Set1_bins.txt','Set2_bins.txt','Set3_bins.txt',...
                  'Set4_bins.txt','Set5_bins.txt','Set6_bins.txt'};

% only select pairs from this bin for now
target_lure_bin = 2;

if ~exist(out_dir, 'dir')
    mkdir(out_dir);
end


%% load all
%--------------------------------------------------------------------------
fprintf('loading all available pairs from original source...\n');
master_pair_list = [];
for s = 1:numel(mst_set_folders)
    current_set_dir = fullfile(in_dir, mst_set_folders{s});
    bin_table = readmatrix(fullfile(current_set_dir, lure_bin_files{s}));
    
     % basic check
    if size(bin_table,2) < 2
        error('lure-bin file for %s must have 2 columns', mst_set_folders{s});
    end

    for j = 1:192
        path_a = fullfile(current_set_dir, sprintf('%03da.png', j));
        path_b = fullfile(current_set_dir, sprintf('%03db.png', j));
        
        if exist(path_a, 'file') && exist(path_b, 'file')
            lure_bin = bin_table(j, 2);
            master_pair_list = [master_pair_list; {path_a, path_b, lure_bin}];
        end
    end
end
fprintf('found %d total pairs.\n', size(master_pair_list, 1));

%% count pairs with each lure bin in each set
fprintf('\nPairs per lure bin for each set:\n');

for s = 1:numel(mst_set_folders)
    % extract current set name
    set_name = mst_set_folders{s};
    current_set_dir = fullfile(in_dir, mst_set_folders{s});
    bin_table = readmatrix(fullfile(current_set_dir, lure_bin_files{s}));
    
    lure_bins = bin_table(:,2); % second column = lure_bin

    % count how many pairs per bin
    fprintf('\n%s:\n', set_name);
    for b = 1:5
        n_pairs = sum(lure_bins == b);
        fprintf('  Bin %d: %d pairs\n', b, n_pairs);
    end
    
    % specifically print how many are bin 2
    n_bin2 = sum(lure_bins == 2);
    fprintf('  --> Total with lure bin = 2: %d pairs\n', n_bin2);
end


%% randomly selected 120 pairs (20 per set) with lure bin = 2
experimental_pool = master_pair_list(all_bins == target_lure_bin, :);
foil_pool = master_pair_list(all_bins ~= target_lure_bin, :);

fprintf('\nSelected %d pairs from lure-bin %d for experiment pool.\n', ...
        size(experimental_pool,1), target_lure_bin);
fprintf('Remaining %d pairs for foil pool.\n', size(foil_pool,1));

% sanity check
if size(experimental_pool,1) < n_experimental_pairs
    error('Not enough pairs in lure-bin %d to select %d experimental pairs.', ...
          target_lure_bin, n_experimental_pairs);
end

n_experimental_pairs = 120;
pairs_per_set = floor(n_experimental_pairs / numel(mst_set_folders)); % = 20 per set

experimental_pairs = {};

for s = 1:numel(mst_set_folders)
    set_name = mst_set_folders{s};

    % find all pairs from this set that have lure_bin=2
    in_set = contains(master_pair_list(:,1), set_name);
    in_bin2 = cell2mat(master_pair_list(:,3)) == 2;
    set_pairs = master_pair_list(in_set & in_bin2, :);

    % randomly sample from that set
    idx = randperm(size(set_pairs,1), pairs_per_set);
    experimental_pairs = [experimental_pairs; set_pairs(idx, :)];
end

fprintf('\nSelected %d total experimental pairs (â‰ˆ%d per set).\n', ...
        size(experimental_pairs,1), pairs_per_set);


%% for practice, randomly select 20 paris and 40 foils from the remaining pairs (lure bin = 2), 

all_bins = cell2mat(master_pair_list(:,3));
bin2_pairs = master_pair_list(all_bins == target_lure_bin, :);

% exclude already used experimental pairs
exp_set = string(experimental_pairs(:,1)); % target path strings
remaining_bin2_pairs = bin2_pairs(~ismember(string(bin2_pairs(:,1)), exp_set), :);

fprintf('remaining lure-bin=2 pairs after excluding experimentals: %d\n', size(remaining_bin2_pairs,1));

n_practice_pairs = 20;
prac_idx = randperm(size(remaining_bin2_pairs,1), n_practice_pairs);
practice_pairs = remaining_bin2_pairs(prac_idx, :);

remaining_after_prac = remaining_bin2_pairs;
remaining_after_prac(prac_idx, :) = [];  % remove practice pairs

n_practice_foils = 40;
foil_idx = randperm(size(remaining_after_prac,1), n_practice_foils);
practice_foils = remaining_after_prac(foil_idx, :);

fprintf('selected %d practice pairs and %d practice foils.\n', n_practice_pairs, n_practice_foils);


%% randomly select 640 foil images from the rest of all other pairs
fprintf('\nselecting 640 main foils balanced across sets...\n');

n_main_foils = 640;
foils_per_set = floor(n_main_foils / numel(mst_set_folders)); % = 106 per set (remainder handled below)
experimental_foils = {};

for s = 1:numel(mst_set_folders)
    set_name = mst_set_folders{s};

    % find all pairs from this set not used in main or practice
    in_set = contains(master_pair_list(:,1), set_name);
    is_used = ismember(master_pair_list(:,1), [experimental_pairs(:,1); practice_pairs(:,1)]);
    available_pairs = master_pair_list(in_set & ~is_used, :);

    % select foils from the 'a' image of each available pair
    n_this_set = min(foils_per_set, size(available_pairs,1));
    idx = randperm(size(available_pairs,1), n_this_set);
    experimental_foils = [experimental_foils; available_pairs(idx, :)];
end

% If you need to fill up a few remaining (due to rounding)
while size(experimental_foils,1) < n_main_foils
    extra_idx = randi(size(master_pair_list,1));
    if ~ismember(master_pair_list(extra_idx,1), [experimental_pairs(:,1); practice_pairs(:,1); experimental_foils(:,1)])
        experimental_foils = [experimental_foils; master_pair_list(extra_idx, :)];
    end
end

fprintf('selected %d main foils total.\n', size(experimental_foils,1));


%% COPY EXPERIMENTAL PAIRS
fprintf('\ncopying %d experimental pairs...\n', n_experimental_pairs);
for i = 1:n_experimental_pairs
    source_targ = experimental_pairs{i,1};
    source_lure = experimental_pairs{i,2};
    copyfile(source_targ, fullfile(out_dir, sprintf('mst_%03d_targ_l2.png', i)));
    copyfile(source_lure, fullfile(out_dir, sprintf('mst_%03d_lure.png', i)));
end

%% COPY MAIN FOILS (ONLY THE "a" IMAGES)
fprintf('Copying %d main foils (a images only)...\n', n_main_foils);
for i = 1:n_main_foils
    source_foil = main_foils{i,1}; % only "a" image
    copyfile(source_foil, fullfile(out_dir, sprintf('mst_%03d_foil.png', i)));
end

%% COPY PRACTICE PAIRS
practice_dir = fullfile(out_dir, 'practice');
if ~exist(practice_dir, 'dir'), mkdir(practice_dir); end

fprintf('\nCopying %d practice pairs...\n', n_practice_pairs);
for i = 1:n_practice_pairs
    copyfile(practice_pairs{i,1}, fullfile(practice_dir, sprintf('prac_%03d_targ.png', i)));
    copyfile(practice_pairs{i,2}, fullfile(practice_dir, sprintf('prac_%03d_lure.png', i)));
end

%% COPY PRACTICE FOILS (ONLY "a" IMAGES)
fprintf('Copying %d practice foils (a images only)...\n', n_practice_foils);
for i = 1:n_practice_foils
    source_foil = practice_foils{i,1}; % only "a"
    copyfile(source_foil, fullfile(practice_dir, sprintf('prac_foil_%03d.png', i)));
end




% shuffle the master list to randomize selection
shuffled_indices = randperm(size(master_pair_list, 1));
master_pair_list = master_pair_list(shuffled_indices, :);

%% SELECT AND RENAME EXPERIMENTAL PAIRS
%--------------------------------------------------------------------------
fprintf('selecting and processing %d experimental pairs...\n', n_experimental_pairs);
experimental_pairs = master_pair_list(1:n_experimental_pairs, :);

for i = 1:n_experimental_pairs
    % assign 'a' as target and 'b' as lure for this master set
    source_path_targ = experimental_pairs{i, 1};
    source_path_lure = experimental_pairs{i, 2};
    
    new_name_targ = sprintf('mst_%03d_targ.png', i);
    new_name_lure = sprintf('mst_%03d_lure.png', i);
    
    dest_path_targ = fullfile(out_dir, new_name_targ);
    dest_path_lure = fullfile(out_dir, new_name_lure);
    
    copyfile(source_path_targ, dest_path_targ);
    copyfile(source_path_lure, dest_path_lure);
end
fprintf('experimental pairs created.\n');

%% SELECT AND RENAME FOILS
%--------------------------------------------------------------------------
fprintf('selecting and processing %d foils...\n', n_foils);
remaining_pairs = master_pair_list(n_experimental_pairs+1 : end, :);
foil_counter = 0;

for i = 1:size(remaining_pairs, 1)
    if foil_counter >= n_foils, break; end
    
    % to ensure foils are unique, just use the 'a' image from each pair
    source_path_foil = remaining_pairs{i, 1};
    
    foil_counter = foil_counter + 1;
    new_name_foil = sprintf('mst_%03d_foil.png', foil_counter);
    dest_path_foil = fullfile(out_dir, new_name_foil);
    
    copyfile(source_path_foil, dest_path_foil);
end
assert(foil_counter >= n_foils, 'could not find enough unique foils!');
fprintf('foils created.\n');

%% DONE
fprintf('all %d experimental images and %d foil images are in: "%s"\n', n_experimental_pairs*2, n_foils, out_dir);